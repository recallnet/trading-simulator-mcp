{
  "openapi": "3.0.0",
  "info": {
    "title": "Trading Simulator API",
    "version": "1.0.0",
    "description": "API for the Trading Simulator - a platform for simulated cryptocurrency trading competitions\n      \n## Authentication Guide\n\nThis API uses Bearer token authentication. All protected endpoints require the following header:\n\n- **Authorization**: Bearer your-api-key\n\nWhere \"your-api-key\" is the API key provided during team registration.\n\n### Authentication Examples\n\n**cURL Example:**\n\n```bash\ncurl -X GET \"https://api.example.com/api/account/balances\" \\\n  -H \"Authorization: Bearer abc123def456_ghi789jkl012\" \\\n  -H \"Content-Type: application/json\"\n```\n\n**JavaScript Example:**\n\n```javascript\nconst fetchData = async () => {\n  const apiKey = 'abc123def456_ghi789jkl012';\n  const response = await fetch('https://api.example.com/api/account/balances', {\n    headers: {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json'\n    }\n  });\n  \n  return await response.json();\n};\n```\n\nFor convenience, we provide an API client that handles authentication automatically. See `docs/examples/api-client.ts`.\n      ",
    "contact": {
      "name": "API Support",
      "email": "support@example.com"
    },
    "license": {
      "name": "ISC License",
      "url": "https://opensource.org/licenses/ISC"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local development server"
    },
    {
      "url": "https://api.example.com",
      "description": "Production server"
    }
  ],
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "API key provided in the Authorization header using Bearer token authentication"
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          },
          "status": {
            "type": "integer",
            "description": "HTTP status code"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the error occurred"
          }
        }
      },
      "Trade": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique trade ID"
          },
          "teamId": {
            "type": "string",
            "description": "Team ID that executed the trade"
          },
          "competitionId": {
            "type": "string",
            "description": "ID of the competition this trade is part of"
          },
          "fromToken": {
            "type": "string",
            "description": "Token address that was sold"
          },
          "toToken": {
            "type": "string",
            "description": "Token address that was bought"
          },
          "fromAmount": {
            "type": "number",
            "description": "Amount of fromToken that was sold"
          },
          "toAmount": {
            "type": "number",
            "description": "Amount of toToken that was received"
          },
          "price": {
            "type": "number",
            "description": "Price at which the trade was executed"
          },
          "success": {
            "type": "boolean",
            "description": "Whether the trade was successfully completed"
          },
          "error": {
            "type": "string",
            "description": "Error message if the trade failed"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the trade was executed"
          },
          "fromChain": {
            "type": "string",
            "description": "Blockchain type of the source token"
          },
          "toChain": {
            "type": "string",
            "description": "Blockchain type of the destination token"
          },
          "fromSpecificChain": {
            "type": "string",
            "description": "Specific chain for the source token"
          },
          "toSpecificChain": {
            "type": "string",
            "description": "Specific chain for the destination token"
          }
        }
      },
      "TokenBalance": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token address"
          },
          "amount": {
            "type": "number",
            "description": "Token balance amount"
          },
          "chain": {
            "type": "string",
            "description": "Chain the token belongs to"
          },
          "specificChain": {
            "type": "string",
            "description": "Specific chain for EVM tokens"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication endpoints"
    },
    {
      "name": "Account",
      "description": "Account management endpoints"
    },
    {
      "name": "Trade",
      "description": "Trading endpoints"
    },
    {
      "name": "Price",
      "description": "Price information endpoints"
    },
    {
      "name": "Competition",
      "description": "Competition endpoints"
    },
    {
      "name": "Admin",
      "description": "Admin endpoints"
    },
    {
      "name": "Health",
      "description": "Health check endpoints"
    }
  ],
  "paths": {
    "/api/account/profile": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get team profile",
        "description": "Get profile information for the authenticated team",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Bearer token for authentication (format \"Bearer YOUR_API_KEY\")",
            "example": "Bearer abc123def456_ghi789jkl012"
          }
        ],
        "responses": {
          "200": {
            "description": "Team profile",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Operation success status"
                    },
                    "team": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Team ID"
                        },
                        "name": {
                          "type": "string",
                          "description": "Team name"
                        },
                        "email": {
                          "type": "string",
                          "description": "Team email"
                        },
                        "contact_person": {
                          "type": "string",
                          "description": "Contact person name"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Team creation timestamp"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Team last update timestamp"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication"
          },
          "404": {
            "description": "Team not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Update team profile",
        "description": "Update profile information for the authenticated team",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Bearer token for authentication (format \"Bearer YOUR_API_KEY\")",
            "example": "Bearer abc123def456_ghi789jkl012"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contactPerson": {
                    "type": "string",
                    "description": "New contact person name"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated team profile",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Operation success status"
                    },
                    "team": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Team ID"
                        },
                        "name": {
                          "type": "string",
                          "description": "Team name"
                        },
                        "email": {
                          "type": "string",
                          "description": "Team email"
                        },
                        "contact_person": {
                          "type": "string",
                          "description": "Updated contact person name"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Team creation timestamp"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Team update timestamp"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication"
          },
          "404": {
            "description": "Team not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/account/balances": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get token balances",
        "description": "Get all token balances for the authenticated team",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Bearer token for authentication (format \"Bearer YOUR_API_KEY\")",
            "example": "Bearer abc123def456_ghi789jkl012"
          }
        ],
        "responses": {
          "200": {
            "description": "Team token balances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Operation success status"
                    },
                    "teamId": {
                      "type": "string",
                      "description": "Team ID"
                    },
                    "balances": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "token": {
                            "type": "string",
                            "description": "Token address"
                          },
                          "amount": {
                            "type": "number",
                            "description": "Token balance amount"
                          },
                          "chain": {
                            "type": "string",
                            "enum": [
                              "evm",
                              "svm"
                            ],
                            "description": "Blockchain type of the token"
                          },
                          "specificChain": {
                            "type": "string",
                            "nullable": true,
                            "description": "Specific chain for EVM tokens"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/account/portfolio": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get portfolio information",
        "description": "Get portfolio valuation and token details for the authenticated team",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Bearer token for authentication (format \"Bearer YOUR_API_KEY\")",
            "example": "Bearer abc123def456_ghi789jkl012"
          }
        ],
        "responses": {
          "200": {
            "description": "Team portfolio information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Operation success status"
                    },
                    "teamId": {
                      "type": "string",
                      "description": "Team ID"
                    },
                    "totalValue": {
                      "type": "number",
                      "description": "Total portfolio value in USD"
                    },
                    "tokens": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "token": {
                            "type": "string",
                            "description": "Token address"
                          },
                          "amount": {
                            "type": "number",
                            "description": "Token balance amount"
                          },
                          "price": {
                            "type": "number",
                            "description": "Current token price in USD"
                          },
                          "value": {
                            "type": "number",
                            "description": "Total value of token holdings in USD"
                          },
                          "chain": {
                            "type": "string",
                            "enum": [
                              "evm",
                              "svm"
                            ],
                            "description": "Blockchain type of the token"
                          },
                          "specificChain": {
                            "type": "string",
                            "nullable": true,
                            "description": "Specific chain for EVM tokens"
                          }
                        }
                      }
                    },
                    "snapshotTime": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Time of the snapshot (if source is 'snapshot')"
                    },
                    "source": {
                      "type": "string",
                      "enum": [
                        "snapshot",
                        "live-calculation"
                      ],
                      "description": "Source of the portfolio data"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/account/trades": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get trade history",
        "description": "Get trade history for the authenticated team",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Bearer token for authentication (format \"Bearer YOUR_API_KEY\")",
            "example": "Bearer abc123def456_ghi789jkl012"
          }
        ],
        "responses": {
          "200": {
            "description": "Team trade history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Operation success status"
                    },
                    "teamId": {
                      "type": "string",
                      "description": "Team ID"
                    },
                    "trades": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique trade ID"
                          },
                          "teamId": {
                            "type": "string",
                            "description": "Team ID that executed the trade"
                          },
                          "competitionId": {
                            "type": "string",
                            "description": "ID of the competition this trade is part of"
                          },
                          "fromToken": {
                            "type": "string",
                            "description": "Token address that was sold"
                          },
                          "toToken": {
                            "type": "string",
                            "description": "Token address that was bought"
                          },
                          "fromAmount": {
                            "type": "number",
                            "description": "Amount of fromToken that was sold"
                          },
                          "toAmount": {
                            "type": "number",
                            "description": "Amount of toToken that was received"
                          },
                          "price": {
                            "type": "number",
                            "description": "Price at which the trade was executed"
                          },
                          "success": {
                            "type": "boolean",
                            "description": "Whether the trade was successfully completed"
                          },
                          "error": {
                            "type": "string",
                            "description": "Error message if the trade failed"
                          },
                          "timestamp": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp of when the trade was executed"
                          },
                          "fromChain": {
                            "type": "string",
                            "description": "Blockchain type of the source token"
                          },
                          "toChain": {
                            "type": "string",
                            "description": "Blockchain type of the destination token"
                          },
                          "fromSpecificChain": {
                            "type": "string",
                            "description": "Specific chain for the source token"
                          },
                          "toSpecificChain": {
                            "type": "string",
                            "description": "Specific chain for the destination token"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/admin/setup": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Set up initial admin account",
        "description": "Creates the first admin account. This endpoint is only available when no admin exists in the system.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "username",
                  "password",
                  "email"
                ],
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Admin username",
                    "example": "admin"
                  },
                  "password": {
                    "type": "string",
                    "description": "Admin password (minimum 8 characters)",
                    "format": "password",
                    "example": "password123"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Admin email address",
                    "example": "admin@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Admin account created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Operation success status"
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message"
                    },
                    "admin": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Admin ID"
                        },
                        "username": {
                          "type": "string",
                          "description": "Admin username"
                        },
                        "email": {
                          "type": "string",
                          "description": "Admin email"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Account creation timestamp"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required parameters or password too short"
          },
          "403": {
            "description": "Admin setup not allowed - an admin account already exists"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/admin/teams/register": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Register a new team",
        "description": "Admin-only endpoint to register a new team. Admins create team accounts and distribute the generated API keys to team members. Teams cannot register themselves.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "teamName",
                  "email",
                  "contactPerson"
                ],
                "properties": {
                  "teamName": {
                    "type": "string",
                    "description": "Name of the team",
                    "example": "Team Alpha"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Team email address",
                    "example": "team@example.com"
                  },
                  "contactPerson": {
                    "type": "string",
                    "description": "Name of the contact person",
                    "example": "John Doe"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Team registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Operation success status"
                    },
                    "team": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Team ID"
                        },
                        "name": {
                          "type": "string",
                          "description": "Team name"
                        },
                        "email": {
                          "type": "string",
                          "description": "Team email"
                        },
                        "contactPerson": {
                          "type": "string",
                          "description": "Contact person name"
                        },
                        "contact_person": {
                          "type": "string",
                          "description": "Contact person name (snake_case version)"
                        },
                        "apiKey": {
                          "type": "string",
                          "description": "API key for the team to use with Bearer authentication. Admin should securely provide this to the team.",
                          "example": "abc123def456_ghi789jkl012"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Account creation timestamp"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required parameters"
          },
          "409": {
            "description": "Team with this email already exists"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/admin/teams": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "List all teams",
        "description": "Get a list of all non-admin teams",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of teams",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Operation success status"
                    },
                    "teams": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Team ID"
                          },
                          "name": {
                            "type": "string",
                            "description": "Team name"
                          },
                          "email": {
                            "type": "string",
                            "description": "Team email"
                          },
                          "contact_person": {
                            "type": "string",
                            "description": "Contact person name"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Account creation timestamp"
                          },
                          "updatedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Account update timestamp"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin authentication required"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/admin/teams/{teamId}": {
      "delete": {
        "tags": [
          "Admin"
        ],
        "summary": "Delete a team",
        "description": "Permanently delete a team and all associated data",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "teamId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the team to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Team deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Operation success status"
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Team ID is required"
          },
          "401": {
            "description": "Unauthorized - Admin authentication required"
          },
          "403": {
            "description": "Cannot delete admin accounts"
          },
          "404": {
            "description": "Team not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/admin/competition/start": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Start a competition",
        "description": "Create and start a new trading competition with specified teams",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "teamIds"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Competition name",
                    "example": "Spring 2023 Trading Competition"
                  },
                  "description": {
                    "type": "string",
                    "description": "Competition description",
                    "example": "A trading competition for the spring semester"
                  },
                  "teamIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of team IDs to include in the competition"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Competition started successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Operation success status"
                    },
                    "competition": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Competition ID"
                        },
                        "name": {
                          "type": "string",
                          "description": "Competition name"
                        },
                        "description": {
                          "type": "string",
                          "description": "Competition description"
                        },
                        "startDate": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Competition start date"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date-time",
                          "nullable": true,
                          "description": "Competition end date (null if not ended)"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "pending",
                            "active",
                            "completed"
                          ],
                          "description": "Competition status"
                        },
                        "teamIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Team IDs participating in the competition"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required parameters"
          },
          "401": {
            "description": "Unauthorized - Admin authentication required"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/admin/competition/end": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "End a competition",
        "description": "End an active competition and finalize the results",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "competitionId"
                ],
                "properties": {
                  "competitionId": {
                    "type": "string",
                    "description": "ID of the competition to end"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Competition ended successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Operation success status"
                    },
                    "competition": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Competition ID"
                        },
                        "name": {
                          "type": "string",
                          "description": "Competition name"
                        },
                        "description": {
                          "type": "string",
                          "description": "Competition description"
                        },
                        "startDate": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Competition start date"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Competition end date"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "pending",
                            "active",
                            "completed"
                          ],
                          "description": "Competition status (completed)"
                        }
                      }
                    },
                    "leaderboard": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "teamId": {
                            "type": "string",
                            "description": "Team ID"
                          },
                          "value": {
                            "type": "number",
                            "description": "Final portfolio value"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing competitionId parameter"
          },
          "401": {
            "description": "Unauthorized - Admin authentication required"
          },
          "404": {
            "description": "Competition not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/admin/competition/{competitionId}/snapshots": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get competition snapshots",
        "description": "Get portfolio snapshots for a competition, optionally filtered by team",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "competitionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the competition"
          },
          {
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Optional team ID to filter snapshots"
          }
        ],
        "responses": {
          "200": {
            "description": "Competition snapshots",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Operation success status"
                    },
                    "snapshots": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Snapshot ID"
                          },
                          "competitionId": {
                            "type": "string",
                            "description": "Competition ID"
                          },
                          "teamId": {
                            "type": "string",
                            "description": "Team ID"
                          },
                          "totalValue": {
                            "type": "number",
                            "description": "Total portfolio value at snapshot time"
                          },
                          "timestamp": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Snapshot timestamp"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing competitionId or team not in competition"
          },
          "401": {
            "description": "Unauthorized - Admin authentication required"
          },
          "404": {
            "description": "Competition or team not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/admin/reports/performance": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get performance reports",
        "description": "Get performance reports and leaderboard for a competition",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "competitionId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the competition"
          }
        ],
        "responses": {
          "200": {
            "description": "Performance reports",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Operation success status"
                    },
                    "competition": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Competition ID"
                        },
                        "name": {
                          "type": "string",
                          "description": "Competition name"
                        },
                        "description": {
                          "type": "string",
                          "description": "Competition description"
                        },
                        "startDate": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Competition start date"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date-time",
                          "nullable": true,
                          "description": "Competition end date"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "pending",
                            "active",
                            "completed"
                          ],
                          "description": "Competition status"
                        }
                      }
                    },
                    "leaderboard": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "rank": {
                            "type": "integer",
                            "description": "Team rank on the leaderboard"
                          },
                          "teamId": {
                            "type": "string",
                            "description": "Team ID"
                          },
                          "teamName": {
                            "type": "string",
                            "description": "Team name"
                          },
                          "portfolioValue": {
                            "type": "number",
                            "description": "Portfolio value"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing competitionId parameter"
          },
          "401": {
            "description": "Unauthorized - Admin authentication required"
          },
          "404": {
            "description": "Competition not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/competition/leaderboard": {
      "get": {
        "tags": [
          "Competition"
        ],
        "summary": "Get competition leaderboard",
        "description": "Get the leaderboard for the active competition or a specific competition",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Bearer token for authentication (format \"Bearer YOUR_API_KEY\")",
            "example": "Bearer abc123def456_ghi789jkl012"
          },
          {
            "in": "query",
            "name": "competitionId",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Optional competition ID (if not provided, the active competition is used)"
          }
        ],
        "responses": {
          "200": {
            "description": "Competition leaderboard",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Operation success status"
                    },
                    "competition": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Competition ID"
                        },
                        "name": {
                          "type": "string",
                          "description": "Competition name"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "description": "Competition description"
                        },
                        "startDate": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Competition start date"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date-time",
                          "nullable": true,
                          "description": "Competition end date"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "PENDING",
                            "ACTIVE",
                            "COMPLETED"
                          ],
                          "description": "Competition status"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "When the competition was created"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "When the competition was last updated"
                        }
                      }
                    },
                    "leaderboard": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "rank": {
                            "type": "integer",
                            "description": "Team rank on the leaderboard"
                          },
                          "teamId": {
                            "type": "string",
                            "description": "Team ID"
                          },
                          "teamName": {
                            "type": "string",
                            "description": "Team name"
                          },
                          "portfolioValue": {
                            "type": "number",
                            "description": "Current portfolio value in USD"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - No active competition and no competitionId provided"
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication"
          },
          "403": {
            "description": "Forbidden - Team not participating in the competition"
          },
          "404": {
            "description": "Competition not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/competition/status": {
      "get": {
        "tags": [
          "Competition"
        ],
        "summary": "Get competition status",
        "description": "Get the status of the active competition",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Bearer token for authentication (format \"Bearer YOUR_API_KEY\")",
            "example": "Bearer abc123def456_ghi789jkl012"
          }
        ],
        "responses": {
          "200": {
            "description": "Competition status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Operation success status"
                    },
                    "active": {
                      "type": "boolean",
                      "description": "Whether there is an active competition"
                    },
                    "competition": {
                      "type": "object",
                      "nullable": true,
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Competition ID"
                        },
                        "name": {
                          "type": "string",
                          "description": "Competition name"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "description": "Competition description"
                        },
                        "startDate": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Competition start date"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date-time",
                          "nullable": true,
                          "description": "Competition end date"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "PENDING",
                            "ACTIVE",
                            "COMPLETED"
                          ],
                          "description": "Competition status"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "When the competition was created"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "When the competition was last updated"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "Additional information about the competition status",
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/competition/rules": {
      "get": {
        "tags": [
          "Competition"
        ],
        "summary": "Get competition rules",
        "description": "Get the rules for all competitions",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Bearer token for authentication (format \"Bearer YOUR_API_KEY\")",
            "example": "Bearer abc123def456_ghi789jkl012"
          }
        ],
        "responses": {
          "200": {
            "description": "Competition rules",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Operation success status"
                    },
                    "rules": {
                      "type": "object",
                      "properties": {
                        "tradingRules": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of trading rules"
                        },
                        "rateLimits": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "List of rate limits"
                        },
                        "slippageFormula": {
                          "type": "string",
                          "description": "Formula used to calculate slippage"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/health": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Basic health check",
        "description": "Check if the API is running",
        "responses": {
          "200": {
            "description": "API is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Health status of the API",
                      "example": "ok"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Current server time"
                    },
                    "uptime": {
                      "type": "number",
                      "description": "Server uptime in seconds"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/health/detailed": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Detailed health check",
        "description": "Check if the API and all its services are running properly",
        "responses": {
          "200": {
            "description": "Detailed health status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Overall health status of the API",
                      "example": "ok"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Current server time"
                    },
                    "uptime": {
                      "type": "number",
                      "description": "Server uptime in seconds"
                    },
                    "version": {
                      "type": "string",
                      "description": "API version"
                    },
                    "services": {
                      "type": "object",
                      "description": "Status of individual services",
                      "properties": {
                        "priceTracker": {
                          "type": "string",
                          "description": "Status of the price tracker service",
                          "example": "ok"
                        },
                        "balanceManager": {
                          "type": "string",
                          "description": "Status of the balance manager service",
                          "example": "ok"
                        },
                        "tradeSimulator": {
                          "type": "string",
                          "description": "Status of the trade simulator service",
                          "example": "ok"
                        },
                        "competitionManager": {
                          "type": "string",
                          "description": "Status of the competition manager service",
                          "example": "ok"
                        },
                        "teamManager": {
                          "type": "string",
                          "description": "Status of the team manager service",
                          "example": "ok"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/price": {
      "get": {
        "tags": [
          "Price"
        ],
        "summary": "Get price for a token",
        "description": "Get the current price of a specified token",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Bearer token for authentication (format \"Bearer YOUR_API_KEY\")",
            "example": "Bearer abc123def456_ghi789jkl012"
          },
          {
            "in": "query",
            "name": "token",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Token address",
            "example": "So11111111111111111111111111111111111111112"
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "evm",
                "svm"
              ]
            },
            "required": false,
            "description": "Blockchain type of the token",
            "example": "svm"
          },
          {
            "in": "query",
            "name": "specificChain",
            "schema": {
              "type": "string",
              "enum": [
                "eth",
                "polygon",
                "bsc",
                "arbitrum",
                "optimism",
                "avalanche",
                "base",
                "linea",
                "zksync",
                "scroll",
                "mantle",
                "svm"
              ]
            },
            "required": false,
            "description": "Specific chain for EVM tokens",
            "example": "eth"
          }
        ],
        "responses": {
          "200": {
            "description": "Token price information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Whether the price was successfully retrieved"
                    },
                    "price": {
                      "type": "number",
                      "nullable": true,
                      "description": "Current price of the token in USD"
                    },
                    "token": {
                      "type": "string",
                      "description": "Token address"
                    },
                    "chain": {
                      "type": "string",
                      "enum": [
                        "EVM",
                        "SVM"
                      ],
                      "description": "Blockchain type of the token"
                    },
                    "specificChain": {
                      "type": "string",
                      "nullable": true,
                      "description": "Specific chain for EVM tokens"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/price/token-info": {
      "get": {
        "tags": [
          "Price"
        ],
        "summary": "Get detailed token information",
        "description": "Get detailed token information including price and specific chain",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Bearer token for authentication (format \"Bearer YOUR_API_KEY\")",
            "example": "Bearer abc123def456_ghi789jkl012"
          },
          {
            "in": "query",
            "name": "token",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Token address",
            "example": "So11111111111111111111111111111111111111112"
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string",
              "enum": [
                "evm",
                "svm"
              ]
            },
            "required": false,
            "description": "Blockchain type of the token",
            "example": "svm"
          },
          {
            "in": "query",
            "name": "specificChain",
            "schema": {
              "type": "string",
              "enum": [
                "eth",
                "polygon",
                "bsc",
                "arbitrum",
                "optimism",
                "avalanche",
                "base",
                "linea",
                "zksync",
                "scroll",
                "mantle",
                "svm"
              ]
            },
            "required": false,
            "description": "Specific chain for EVM tokens",
            "example": "eth"
          }
        ],
        "responses": {
          "200": {
            "description": "Token information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Whether the token information was successfully retrieved"
                    },
                    "price": {
                      "type": "number",
                      "nullable": true,
                      "description": "Current price of the token in USD"
                    },
                    "token": {
                      "type": "string",
                      "description": "Token address"
                    },
                    "chain": {
                      "type": "string",
                      "enum": [
                        "EVM",
                        "SVM"
                      ],
                      "description": "Blockchain type of the token"
                    },
                    "specificChain": {
                      "type": "string",
                      "nullable": true,
                      "description": "Specific chain for EVM tokens"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/trade/execute": {
      "post": {
        "tags": [
          "Trade"
        ],
        "summary": "Execute a trade",
        "description": "Execute a trade between two tokens",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Bearer token for authentication (format \"Bearer YOUR_API_KEY\")"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "fromToken",
                  "toToken",
                  "amount"
                ],
                "properties": {
                  "fromToken": {
                    "type": "string",
                    "description": "Token address to sell",
                    "example": "So11111111111111111111111111111111111111112"
                  },
                  "toToken": {
                    "type": "string",
                    "description": "Token address to buy",
                    "example": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"
                  },
                  "amount": {
                    "type": "string",
                    "description": "Amount of fromToken to trade",
                    "example": "1.5"
                  },
                  "slippageTolerance": {
                    "type": "string",
                    "description": "Optional slippage tolerance in percentage",
                    "example": "0.5"
                  },
                  "fromChain": {
                    "type": "string",
                    "description": "Optional - Blockchain type for fromToken",
                    "example": "svm"
                  },
                  "fromSpecificChain": {
                    "type": "string",
                    "description": "Optional - Specific chain for fromToken",
                    "example": "mainnet"
                  },
                  "toChain": {
                    "type": "string",
                    "description": "Optional - Blockchain type for toToken",
                    "example": "svm"
                  },
                  "toSpecificChain": {
                    "type": "string",
                    "description": "Optional - Specific chain for toToken",
                    "example": "mainnet"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Trade executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Whether the trade was successfully executed"
                    },
                    "transaction": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Unique trade ID"
                        },
                        "teamId": {
                          "type": "string",
                          "description": "Team ID that executed the trade"
                        },
                        "competitionId": {
                          "type": "string",
                          "description": "ID of the competition this trade is part of"
                        },
                        "fromToken": {
                          "type": "string",
                          "description": "Token address that was sold"
                        },
                        "toToken": {
                          "type": "string",
                          "description": "Token address that was bought"
                        },
                        "fromAmount": {
                          "type": "number",
                          "description": "Amount of fromToken that was sold"
                        },
                        "toAmount": {
                          "type": "number",
                          "description": "Amount of toToken that was received"
                        },
                        "price": {
                          "type": "number",
                          "description": "Price at which the trade was executed"
                        },
                        "success": {
                          "type": "boolean",
                          "description": "Whether the trade was successfully completed"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Timestamp of when the trade was executed"
                        },
                        "fromChain": {
                          "type": "string",
                          "description": "Blockchain type of the source token"
                        },
                        "toChain": {
                          "type": "string",
                          "description": "Blockchain type of the destination token"
                        },
                        "fromSpecificChain": {
                          "type": "string",
                          "description": "Specific chain for the source token"
                        },
                        "toSpecificChain": {
                          "type": "string",
                          "description": "Specific chain for the destination token"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input parameters"
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication"
          },
          "403": {
            "description": "Forbidden - Competition not in progress or other restrictions"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/trade/quote": {
      "get": {
        "tags": [
          "Trade"
        ],
        "summary": "Get a quote for a trade",
        "description": "Get a quote for a potential trade between two tokens",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Bearer token for authentication (format \"Bearer YOUR_API_KEY\")"
          },
          {
            "in": "query",
            "name": "fromToken",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Token address to sell",
            "example": "So11111111111111111111111111111111111111112"
          },
          {
            "in": "query",
            "name": "toToken",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Token address to buy",
            "example": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"
          },
          {
            "in": "query",
            "name": "amount",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Amount of fromToken to get quote for",
            "example": 1.5
          },
          {
            "in": "query",
            "name": "fromChain",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Optional blockchain type for fromToken",
            "example": "svm"
          },
          {
            "in": "query",
            "name": "fromSpecificChain",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Optional specific chain for fromToken",
            "example": "mainnet"
          },
          {
            "in": "query",
            "name": "toChain",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Optional blockchain type for toToken",
            "example": "svm"
          },
          {
            "in": "query",
            "name": "toSpecificChain",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Optional specific chain for toToken",
            "example": "mainnet"
          }
        ],
        "responses": {
          "200": {
            "description": "Quote generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "fromToken": {
                      "type": "string",
                      "description": "Token address being sold"
                    },
                    "toToken": {
                      "type": "string",
                      "description": "Token address being bought"
                    },
                    "fromAmount": {
                      "type": "number",
                      "description": "Amount of fromToken to be sold"
                    },
                    "toAmount": {
                      "type": "number",
                      "description": "Estimated amount of toToken to be received"
                    },
                    "exchangeRate": {
                      "type": "number",
                      "description": "Exchange rate between the tokens (toAmount / fromAmount)"
                    },
                    "slippage": {
                      "type": "number",
                      "description": "Applied slippage percentage for this trade size"
                    },
                    "prices": {
                      "type": "object",
                      "properties": {
                        "fromToken": {
                          "type": "number",
                          "description": "Price of the source token in USD"
                        },
                        "toToken": {
                          "type": "number",
                          "description": "Price of the destination token in USD"
                        }
                      }
                    },
                    "chains": {
                      "type": "object",
                      "properties": {
                        "fromChain": {
                          "type": "string",
                          "description": "Blockchain type of the source token"
                        },
                        "toChain": {
                          "type": "string",
                          "description": "Blockchain type of the destination token"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input parameters"
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  }
}